- задача 1 - ок
Решение заняло около 3-х часов, пока по частям добавляла решение и проверяла результат.
Почитала, что можно использовать модуль numpy для работы с матрицами.
При этом во многих местах пишут, что можно складывать матрицы только одинакового размера.
Но я сдела вручную и складываю любые матрицы (хотя возможно с математической точки зрения
это и неверно), при необходимости дополняя строки результирующей
матрицы до нужной длины. Еще у меня есть вспомогательный метод, который проверяет
корректность матрицы при инициализации и заодно находит число максимальной длины,
чтобы красиво нарисовать матрицу через __str__.
Для наглядности сделала 3 варианта вычислений с разными матрицами.

- задача 2 - ок
Вы напугали, что задача сложная. Я даже решила сначала 1, потом 3ью. А когда открыла 2ую, не поняла что в ней сложного.
Поясню свою логику: в инициализатор абстр.класса передаю 2 параметра, из них размер обязателен,
название по желанию. Добавила атрибут класса, который для каждого типа одежды свой.
Размер можно было передавать аргументом и в метод calc_material(), но я подумала, что у меня
могут появится и другие методы по расчету, и чтобы не передавать в них один и тот же параметр,
решила что ему место в init-е. В условии сказано, что "у типов одежды существуют параметры: размер (для пальто) и рост (для костюма)."
В данном случае нет смысла что-то городить и перегружать init-ы в дочерних классах, я просто
сохраняю будь то размер или рост в атрибут size_param.
И реализую для каждого класса свой метод calc_material() по соотв.формулам.

- задача 3 - ок
40 мин в основном потому, что разбиралась и экспериментировала с @property и сеттером.
Есть небольшой нюанс, который не совсем поняла - в строке 33 я закомментировала строку и написала пояснение.
В обоих случая всё работает отлично. Но мне кажется излишним писать в ините:
self._count_cell = None
когда следующей строкой у меня вызывается сеттер, который так и так создаст этот атрибут и присвоит ему значение
self.count_cell = count_cell
